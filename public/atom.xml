<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vishal Tomar's Blog]]></title>
  <link href="http://blog.vishaltomar.in/atom.xml" rel="self"/>
  <link href="http://blog.vishaltomar.in/"/>
  <updated>2014-03-22T13:57:14+05:30</updated>
  <id>http://blog.vishaltomar.in/</id>
  <author>
    <name><![CDATA[Vishal Tomar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails]]></title>
    <link href="http://blog.vishaltomar.in/blog/2014/03/21/getting-started-with-rails/"/>
    <updated>2014-03-21T22:37:58+05:30</updated>
    <id>http://blog.vishaltomar.in/blog/2014/03/21/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p>You must have probably heard about Ruby on Rails by now. You must have heard people talking about how they wrote an application in less than half the time it would have taken using some other technology. Rails surely is one of the most talked about technology on the internet. But how does it help you developing apps faster? <strong>What is it that makes Rails so popular?</strong></p>

<p>In this article I talk about the basic idea behind rails, and how it can help you in your web development.</p>

<!-- more -->


<p>This article basically is the first of the two articles I&rsquo;m gonna write about getting started with rails. In the current, first article I’ll help prepare you for your first foray into Rails by explaining what it is, how it works, and where it fits into the spectrum of web development and design. Then we get started with some basic concepts and essential components of Ruby on Rails. In the second part (most probably next week) I will try to show how to install the engine. Deploy your first rails app. We will also take a closer look at Rails’ inner workings. Then I’ll point you to some good tutorials on the Web that you can use to learn Rails. I’ll also provide a lot of further reading recommendations so you can dig as deep into the topic as you like.</p>

<p>I assume you’re already familiar with some other form of Web development, whether PHP, Python, Perl or Java, and relational databases like MySQL. First, I’ll introduce Rails and the basic ideas behind it. So lets dive right in.</p>

<h2>What is Rails? <img class="right" src="http://upload.wikimedia.org/wikipedia/commons/1/16/Ruby_on_Rails-logo.png" title="Rails logo" ></h2>

<p>Ruby on Rails is a web development framework which was created by <a href="http://david.heinemeierhansson.com/">David Heinemeier Hansson</a> during <a href="https://basecamp.com/">Basecamp’s</a> development at 37signals in 2004. Basecamp was built in Ruby because Hansson found PHP and Java not powerful or flexible enough. Hansson wanted make web development easier so he made his own Web development framework, based on simple ideas that had proven successful elsewhere. Rails core foundation is based on pragmatism and established paradigms instead of exotic new ideas. And that’s what made it so successful.</p>

<p>The framework he created proved to be extensible, expandable, and multi-purpose. He decided to share it as open source software. A small group of developers, now known as the Rails Core Team, formed and improved and expanded the framework. After a good deal of effort, Ruby on Rails matured into a robust, solid software development platform. Today, Rails has a strong community and great documentation, and is used by thousands of developers to power hundreds of websites, such as <a href="https://twitter.com/">Twitter</a>, <a href="http://github.com">Github</a>, <a href="http://www.scribd.com/">Scribd</a>, <a href="http://www.hulu.com/">Hulu</a> and many more.</p>

<p>Rails is designed to make building web applications simpler and easier. Rails provides developers with a large, easily expandable set of building blocks they can use (and re-use) to create web applications. Developers can use, integrate, and customize these components of code in any manner they choose to, to create the unique functionality they need for their application. Building software this way really helps reduce the time it takes for developers to create and later maintain their applications. It also helps to standardize the way applications get built, making it easier for many developers to collaborate and write more uniform code.</p>

<h3>Model-View-Controller</h3>

<p>Rails is based on the Model-View-Controller pattern that splits your application into three parts:</p>

<ul>
<li>The <strong>Model</strong> represents the data, and does nothing else. The model does NOT depend on the controller or the view.</li>
<li>The <strong>Views</strong> are the templates that render data to the user and all the logic surrounding presentational aspects of your app. They send user actions (e.g. button clicks) to the controller.</li>
<li>The <strong>Controller</strong> sits at the heart of everything, processing requests from clients, initiating changes in the models and triggering the rendering of the templates.</li>
</ul>


<p> <img class="center" src="http://paceinfonet.org/wp-content/uploads/31.png" title="Rails logo" ></p>

<h3>Convention over Configuration</h3>

<p>David Heinemeier Hansson has referred to rails as <em>&lsquo;opinionated software.&rsquo;</em> Rails has strong opinions about how a web application should be composed and how subsystems should be configured together. Unlike existing Java frameworks which rely on reams of XML configuration files, Rails instead believes in <strong>Convention over Configuration</strong>. Ruby on Rails replaces the massive XML configuration files by a consistent naming convention and a standard directory location for the different types of files used in a Rails application.</p>

<p><img class="center" src="http://geekandpoke.typepad.com/geekandpoke/images/2008/06/03/sexpl18.jpg" title="convention over configuration" ></p>

<p>This means that entities in Rails have to named in a certain conventional way. That’s not to say there’s no possibility of doing things differently if you need to, but you’ll definitely have it easier if you do things <strong><em>“the Rails way.”</em></strong> And that way happened to be exactly the right one not only for Hansson but for a lot of other developers, too, another important reason for Rails’ success.</p>

<h3>Don&rsquo;t Repeat Yourself (DRY)</h3>

<p>Another key philosophical principle behind Ruby on Rails is commonly expressed as <strong>Don&rsquo;t Repeat Yourself (DRY)</strong>. The idea behind <em>DRYness</em> is to minimized duplicate code. At the application level you can reuse Rails code via helpers, or at the language level via class inheritance. Rails also allows for HTML snippet reuse via partials. But in addition to helpers, class inheritance, and partials, Rails has a great plugin mechanism where a you can import and reuse a large set of core Web 2.0 functionality.</p>

<p><img class="center" src="https://i.chzbgr.com/maxW500/1036028672/hF2EBA6B4/" title="Don't Repeat Yourself" ></p>

<h2>But why Rails?</h2>

<p>Now that you have some feel as to what Rails is, lets try to answer the question as why someone should use Rails.</p>

<ul>
<li><strong>Gain from the best practices</strong> : The Rails community set many standards in web development. They pushed new technologies like REST, Unobtrusive Javascript, and so on. They are already using the best practices that are tried and tested. So, for someone new it is better to use these practices than to go your own way.</li>
<li><strong>Development speed</strong> : True to its maxime <em>don’t repeat yourself</em>, quick development is especially facilitated by getting rid of repetitive coding. Consequently, development cycles in Rails are shorter than those in other programming languages.</li>
<li><strong>Gems/Plugins</strong> :  the Rails community provides a wealth of plugins as Ruby Gems that you simply add to your project Gemfile and install.</li>
<li><strong>Testing tools</strong> : Unlike many other web frameworks, Rails supports Testing out of the box.</li>
</ul>


<h2>Prerequisites for Rails</h2>

<p>In general there are really no prerequisites for learning Rails, but I recommend these steps to make your learning curve easier.</p>

<ol>
<li><p><strong>Start with Ruby</strong> : It&rsquo;s intuitive to start with Ruby and get familiar with it. When I first started to learn Ruby on Rails. I read a few articles by different bloggers that said that you don’t need Ruby to learn Rails. Well now I see that as totally absurd. Take it from someone who initially took that path. If you take the time to fully understand Ruby before you learn Rails; then learning Rails will become a piece of cake. Whether you build controller, action or else, it will all come down to Ruby. Also get familiar with OOP concepts as ruby is an Object Oriented language(infact everything in ruby is an object) these will help you in understanding ruby better.</p></li>
<li><p><strong>Basics of Web develpment</strong> : You will learn Rails much faster if you have some previous web develpment experience, if you are someone new, try to learn atleast basics of internet and web development in general like databases, post , get etc. Another thing I noticed is with Rails you should have some front-end knowledge(basic javascript libraries like jquery, less and sass). You can&rsquo;t be a good Rails developer without some front-end knowledge.</p></li>
<li><p><strong>Make command line your friend</strong> : As Most of the time you will be dealing with command line interface while developing apps in rails, try to get familiar with basic commands.</p></li>
<li><p><strong>Start using version control</strong> : This is more of a bonus then a prereq. Get familiar with a version control system(preferably <a href="http://git-scm.com/">git</a>) as most of Rails community uses Git. This will also help you in handling your source code much better.</p></li>
</ol>


<p>I hope this basic introduction to the  Rails gives you some idea as to what Rails is and how it can be useful to your needs. While Rails is already a great platform its still evolving and I see it acquiring a much larger place in the web development space in the future.</p>

<p>In the second part of this tutorial we will get rolling with Ruby on Rails, install the engine, deploy our first rails app and take a closer look at Rails’ inner workings. I will also provide links to some good tutorials and further reading materials on the web. So stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress]]></title>
    <link href="http://blog.vishaltomar.in/blog/2014/03/02/blogging-with-octopress/"/>
    <updated>2014-03-02T01:49:11+05:30</updated>
    <id>http://blog.vishaltomar.in/blog/2014/03/02/blogging-with-octopress</id>
    <content type="html"><![CDATA[<p>For a long time I really wanted to start a blog. So, I was thinking about what platform to choose. Now I had a great number of options, and to choose one of them, it was more difficult than I thought. So I figured its only fitting, the first blog I write, should be about <strong>How to deploy a pro blog</strong>. Well that too in just 5 minutes.</p>

<!-- more -->


<h4>Now these are the typical options one have</h4>

<ol>
<li><p>To use dynamic content(by dynamic I mean use a database and save the blog post there). You can either use <a href="http://www.wordpress.org">Wordpress</a>, or Blogger or any other site, or you can make your own blogging site(if you can).</p></li>
<li><p>To use static pages generated by a script(now this is really awesome).</p></li>
</ol>


<p>There are pros and cons to both methods, but in my view I really liked the static pages method, and I will tell you why</p>

<ul>
<li><a href="http://www.wordpress.org">WordPress</a> is very good, but it’s over-featured for what I(or most of us) need, and its PHP/MySQL guts are opaque. On top of that i don’t really like the idea of all my writing being inside a big database either; it’s a single point of failure, and that makes me uneasy.</li>
<li>These dynamic sites become unresponsive if you have large contents unless you use some caching plugins, thats not a problem with static pages.</li>
<li>There are already some great framework to generate static blogging pages like <a href="http://octopress.org/">Octopress</a> which is built around <a href="https://github.com/mojombo/jekyll">Jekyll</a>.</li>
<li>I have the entire site as static pages that means its easy to take backup. I can put entire site in source control (git, actually), and so I can do branches and look back at revisions and so on.</li>
<li>If I want to use my text editor I can do that.I can search my sites locally via Spotlight(and grep and find). Also, since it generates static pages, I can move from one web-host to another very, very easily.</li>
</ul>


<p>So thats why I chose Octopress. Now getting into deployment part. <strong>5 minutes and you will have a pro blog</strong>.</p>

<h3>Installing Ruby</h3>

<p>Octopress uses ruby so you should have ruby pre-installed or you can use these commands to install it(I am assuming you are using ubuntu or any other debian based linux).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install ruby 1.9.3</span></code></pre></td></tr></table></div></figure>


<h3>Installing Git</h3>

<p>You should also have Git pre-installed, if it is not you can install it using the given command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git</span></code></pre></td></tr></table></div></figure>


<h3>Installing Octopress</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~ #or wherever u want the octopress folder to be located
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash #only if using rbenv
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>Now install the default Octopress theme</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Now you just need to deploy it. There are several option available you can use github pages,heroku or Rsync. Heroku is my personal favorite.</p>

<h3>Deploying to Heroku</h3>

<p>If you don&rsquo;t already have a Heroku account, <a href="https://api.heroku.com/signup">create one</a>, it&rsquo;s free. Then install the Heroku toolbelt.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh #again assuming you are using ubuntu</span></code></pre></td></tr></table></div></figure>


<p>now create a heroku app for deployment. If this is your first time it will ask your credentials and automatically upload your ssh key.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku create</span></code></pre></td></tr></table></div></figure>


<p>Edit the .gitignore(this is used by git to ignore files) in the root of your repository and remove public. This will let you add generated content for deploying it to Heroku.</p>

<p>Now push the changes to heroku.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'site updated'
</span><span class='line'>git push heroku master </span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it you just deployed your blogging site. you can open the url given by heroku and check it out.Now you have to <a href="http://octopress.org/docs/configuring/">configure</a> it as per your liking</p>
]]></content>
  </entry>
  
</feed>
